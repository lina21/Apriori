import numpy as np
import math
import collections
import copy
import time


def get_data():
        dataset = []
        file = open("data-2016.csv", "r")
        av = file.readlines()
        file.close()
        for i in range(len(av)):
                dataset.append([])
                string = av[i].split()
                for j in range(len(string)):
                        dataset[len(dataset)-1].append(string[j])
        return dataset


def get_transactions(dataset):
        trans = []
        for i in range(len(dataset)):
                j = 2
                courses = []
                while j < len(dataset[i]):
                        if (int(dataset[i][j]) not in courses):
                                courses.append(int(dataset[i][j]))
                        j += 5
                trans.append(sorted(courses))
        return sorted(trans)


def get_unique_courses(dataset):
        courses = dict()
        for i in range(len(dataset)):
                j = 2
                while j < len(dataset[i]):
                        if dataset[i][j] not in courses.keys():
                                courses[dataset[i][j]] = copy.deepcopy(dataset[i][j+1])
                        j += 5
        return courses


def get_course_codes(dataset):
    return sorted(list(map(int, get_unique_courses(dataset).keys())))


def search_trans(t, itemset, key):
    #g - graph, g_dict - course codes translation to the range
    #itemset - the set of items that we search, key - the number of the item in the itemset we search
    result = False
    if int(t[itemset[key]]) == True:
        if key < (len(itemset) - 1):
            result = search_trans(t, itemset, key+1)
        else:
            result = True
    return result


def support_count(bool_trans, itemset):
        support_count = 0
        for i in range(len(bool_trans)):
            found = search_trans(bool_trans[i], itemset, 0)
            if found:
                support_count += 1
        return support_count


def support(bool_trans, itemset, trans_len):
    return support_count(bool_trans, itemset)/trans_len
    
    
    def create_matrix(dataset):
    transactions = get_transactions(dataset)
    courses = get_course_codes(dataset)
    new_trans = np.zeros((len(transactions), len(courses)), dtype = bool)
    #every item of the transaction is the number of the course code from 1 to len(courses)
    for i in range(len(transactions)):
        for j in range(len(transactions[i])):
            new_trans[i][courses.index(transactions[i][j])] = True
    return new_trans, courses


def update_matrix(matrix, courses):
    #the list of popular courses
    new_matrix = np.zeros((len(matrix), len(courses)), dtype = bool)
    candidates = []
    for i in range(len(courses)):
        candidates.append([i])
        for j in range(len(matrix)):
            if matrix[j][courses[i]] == True:
                new_matrix[j][i] = True
    return new_matrix, candidates
    
    
    def Union(itemset1, itemset2):
    return list(sorted(set().union(itemset1, itemset2)))


def generate(lists):
    candidates = []
    if len(lists) > 1:
        index = 0
        while index < len(lists) - 1:
            first = lists[index]
            index2 = index + 1
            while lists[index2] != 'BOUND':
                second = lists[index2]
                candidates.append(Union(first, second))
                index2 += 1
            candidates.append('BOUND')
            index += 1
            while (lists[index] == 'BOUND') and (index < len(lists) - 1):
                index += 1
    return candidates


def binary_search(alist, item):
    if (len(alist) == 0):
        return False
    else:
        midpoint = len(alist)//2
        if alist[midpoint]==item:
            return True
        else:
            if (item < alist[midpoint] and item >= alist[0]):
                return binary_search(alist[:midpoint], item)
            elif (item <= alist[len(alist)-1]):
                return binary_search(alist[midpoint+1:], item)
            else:
                return False


def binary_search_bounds(alist, item):
    if (len(alist) == 0):
        return 0, 0
    else:
        midpoint = len(alist)//2
        if alist[midpoint][0]==item:
            return alist[midpoint][2], alist[midpoint][1]
        else:
            if (item < alist[midpoint][0] and item >= alist[0][0]):
                return binary_search_bounds(alist[:midpoint], item)
            elif (item <= alist[len(alist)-1][0]):
                return binary_search_bounds(alist[midpoint+1:], item)
            else:
                return 0, 0


def Apriori(trans_matrix, courses, min_support, k):
    #here courses the original set of courses
    candidates = []
    prev_lists = []
    #list of k-1 prev candidates
    current_k = 1
    trans_len = len(trans_matrix)

    #first pruning - eliminate all course codes that are not frequent
    supports = np.sum(trans_matrix, axis = 0)/trans_len
    frequent_courses = []
    for i in range(len(courses)):
        if supports[i] > min_support:
            candidates.append(i)
            frequent_courses.append(courses[i])
    trans_matrix, candidates = update_matrix(trans_matrix, candidates)

    #save all transaction numbers in which courses appear
    courses_indices = []
    for i in range(len(candidates)):
        courses_indices.append([j for j in range(trans_len) if trans_matrix[j][candidates[i]] == True])

    candidates.append('BOUND')
    #start of the main cycle, where curent_k is the current length of the itemsets
    #in which transaction courses appear
    result = candidates
    while (len(candidates) != 0) and (current_k < k):
        current_k += 1
        candidates = generate(candidates)
        print('Before pruning: ', len(candidates))
        #additional pruning
        if current_k > 2:
            now1 = time.time()
            #as k grows the first pruning step becomes inefficient
            if current_k < 5:
                i = 0
                while i < len(candidates):
                    pruned = False
                    if candidates[i] != 'BOUND':
                        for j in range(len(candidates[i])-2):
                            #determine the scope of search
                            cand = candidates[i][0:j]+candidates[i][j+1:]
                            b1, b2 = binary_search_bounds(prev_prev_lists, cand[0:current_k-2])
                            if binary_search(prev_lists[b1+1:b2], cand) == False:
                                candidates.pop(i)
                                pruned = True
                                break
                    else:
                        if ((i > 0) and (candidates[i-1] == 'BOUND')) or (i == 0):
                            candidates.pop(i)
                            pruned = True
                    if pruned == False:
                        i += 1
                now2 = time.time()
                del prev_lists
                print('First pruning: ', now2-now1)

        #pruning by checkng current_k - 2 sequences before BOUND first and then continuing
        now1 = time.time()
        i = 0
        prev_prev_lists = []
        prev_prev_lists.append([[0], 0, 0])
        while i < len(candidates):
            if candidates[i] != 'BOUND':
                    #the first item of the candidate

                indices = set(courses_indices[candidates[i][0]])
                for j in range(1, current_k-1):
                    indices = indices & set(courses_indices[candidates[i][j]])
                indices = list(indices)

                sub_matrix = [trans_matrix[index] for index in indices]
                while (candidates[i] != 'BOUND') and (i < len(candidates)):
                    if (support(sub_matrix, candidates[i][current_k-1:], trans_len) <= min_support):
                        candidates.pop(i)
                    else:
                        i += 1
            elif ((i > 0 and candidates[i-1] == 'BOUND') or i == 0):
                    candidates.pop(i)
            #if BOUND
            else:
                #we save k-1 elements of the candidate, i - bound index in the prev_lists, prev bound
                prev_prev_lists.append([candidates[i-1][0:current_k-1], i, prev_prev_lists[len(prev_prev_lists)-1][1]])
                i += 1
        now2 = time.time()
        print('Second pruning: ', now2-now1)


        #now we have only frequent candidates
        #prev_lists = [item for item in candidates if item != 'BOUND']
        if len(candidates) == 0:
            result = prev_lists
        else:
            result = candidates
        prev_lists = copy.deepcopy(candidates)
        print('Apriori', len(candidates), 'k: ', str(current_k))
    while 'BOUND' in result:
        result.remove('BOUND')
    for i in range(len(result)):
        for j in range(len(result[i])):
            result[i][j] = frequent_courses[result[i][j]]
    return result
    
    
    def main():
        min_support = 0.05
        k = 380
        dataset = get_data()
        trans_matrix, courses = create_matrix(dataset)
        combs = Apriori(trans_matrix, courses, min_support, k)
        del trans_matrix
        del courses
        print(combs)


if __name__ == "__main__":
           main()

